// Code generated by mockery v2.0.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// Assign provides a mock function with given fields: partitions
func (_m *Consumer) Assign(partitions []kafka.TopicPartition) error {
	ret := _m.Called(partitions)

	var r0 error
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) error); ok {
		r0 = rf(partitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Assignment provides a mock function with given fields:
func (_m *Consumer) Assignment() ([]kafka.TopicPartition, error) {
	ret := _m.Called()

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func() []kafka.TopicPartition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields:
func (_m *Consumer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Consumer) Commit() ([]kafka.TopicPartition, error) {
	ret := _m.Called()

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func() []kafka.TopicPartition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitMessage provides a mock function with given fields: m
func (_m *Consumer) CommitMessage(m *kafka.Message) ([]kafka.TopicPartition, error) {
	ret := _m.Called(m)

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func(*kafka.Message) []kafka.TopicPartition); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kafka.Message) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitOffsets provides a mock function with given fields: offsets
func (_m *Consumer) CommitOffsets(offsets []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	ret := _m.Called(offsets)

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) []kafka.TopicPartition); ok {
		r0 = rf(offsets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]kafka.TopicPartition) error); ok {
		r1 = rf(offsets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Committed provides a mock function with given fields: partitions, timeoutMs
func (_m *Consumer) Committed(partitions []kafka.TopicPartition, timeoutMs int) ([]kafka.TopicPartition, error) {
	ret := _m.Called(partitions, timeoutMs)

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition, int) []kafka.TopicPartition); ok {
		r0 = rf(partitions, timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]kafka.TopicPartition, int) error); ok {
		r1 = rf(partitions, timeoutMs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Events provides a mock function with given fields:
func (_m *Consumer) Events() chan kafka.Event {
	ret := _m.Called()

	var r0 chan kafka.Event
	if rf, ok := ret.Get(0).(func() chan kafka.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan kafka.Event)
		}
	}

	return r0
}

// GetConsumerGroupMetadata provides a mock function with given fields:
func (_m *Consumer) GetConsumerGroupMetadata() (*kafka.ConsumerGroupMetadata, error) {
	ret := _m.Called()

	var r0 *kafka.ConsumerGroupMetadata
	if rf, ok := ret.Get(0).(func() *kafka.ConsumerGroupMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.ConsumerGroupMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadata provides a mock function with given fields: topic, allTopics, timeoutMs
func (_m *Consumer) GetMetadata(topic *string, allTopics bool, timeoutMs int) (*kafka.Metadata, error) {
	ret := _m.Called(topic, allTopics, timeoutMs)

	var r0 *kafka.Metadata
	if rf, ok := ret.Get(0).(func(*string, bool, int) *kafka.Metadata); ok {
		r0 = rf(topic, allTopics, timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Metadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, bool, int) error); ok {
		r1 = rf(topic, allTopics, timeoutMs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWatermarkOffsets provides a mock function with given fields: topic, partition
func (_m *Consumer) GetWatermarkOffsets(topic string, partition int32) (int64, int64, error) {
	ret := _m.Called(topic, partition)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int32) int64); ok {
		r0 = rf(topic, partition)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(string, int32) int64); ok {
		r1 = rf(topic, partition)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int32) error); ok {
		r2 = rf(topic, partition)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Logs provides a mock function with given fields:
func (_m *Consumer) Logs() chan kafka.LogEvent {
	ret := _m.Called()

	var r0 chan kafka.LogEvent
	if rf, ok := ret.Get(0).(func() chan kafka.LogEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan kafka.LogEvent)
		}
	}

	return r0
}

// OffsetsForTimes provides a mock function with given fields: times, timeoutMs
func (_m *Consumer) OffsetsForTimes(times []kafka.TopicPartition, timeoutMs int) ([]kafka.TopicPartition, error) {
	ret := _m.Called(times, timeoutMs)

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition, int) []kafka.TopicPartition); ok {
		r0 = rf(times, timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]kafka.TopicPartition, int) error); ok {
		r1 = rf(times, timeoutMs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pause provides a mock function with given fields: partitions
func (_m *Consumer) Pause(partitions []kafka.TopicPartition) error {
	ret := _m.Called(partitions)

	var r0 error
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) error); ok {
		r0 = rf(partitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Poll provides a mock function with given fields: timeoutMs
func (_m *Consumer) Poll(timeoutMs int) kafka.Event {
	ret := _m.Called(timeoutMs)

	var r0 kafka.Event
	if rf, ok := ret.Get(0).(func(int) kafka.Event); ok {
		r0 = rf(timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.Event)
		}
	}

	return r0
}

// Position provides a mock function with given fields: partitions
func (_m *Consumer) Position(partitions []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	ret := _m.Called(partitions)

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) []kafka.TopicPartition); ok {
		r0 = rf(partitions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]kafka.TopicPartition) error); ok {
		r1 = rf(partitions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryWatermarkOffsets provides a mock function with given fields: topic, partition, timeoutMs
func (_m *Consumer) QueryWatermarkOffsets(topic string, partition int32, timeoutMs int) (int64, int64, error) {
	ret := _m.Called(topic, partition, timeoutMs)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, int32, int) int64); ok {
		r0 = rf(topic, partition, timeoutMs)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(string, int32, int) int64); ok {
		r1 = rf(topic, partition, timeoutMs)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int32, int) error); ok {
		r2 = rf(topic, partition, timeoutMs)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ReadMessage provides a mock function with given fields: timeout
func (_m *Consumer) ReadMessage(timeout time.Duration) (*kafka.Message, error) {
	ret := _m.Called(timeout)

	var r0 *kafka.Message
	if rf, ok := ret.Get(0).(func(time.Duration) *kafka.Message); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resume provides a mock function with given fields: partitions
func (_m *Consumer) Resume(partitions []kafka.TopicPartition) error {
	ret := _m.Called(partitions)

	var r0 error
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) error); ok {
		r0 = rf(partitions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Seek provides a mock function with given fields: partition, timeoutMs
func (_m *Consumer) Seek(partition kafka.TopicPartition, timeoutMs int) error {
	ret := _m.Called(partition, timeoutMs)

	var r0 error
	if rf, ok := ret.Get(0).(func(kafka.TopicPartition, int) error); ok {
		r0 = rf(partition, timeoutMs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOAuthBearerToken provides a mock function with given fields: oauthBearerToken
func (_m *Consumer) SetOAuthBearerToken(oauthBearerToken kafka.OAuthBearerToken) error {
	ret := _m.Called(oauthBearerToken)

	var r0 error
	if rf, ok := ret.Get(0).(func(kafka.OAuthBearerToken) error); ok {
		r0 = rf(oauthBearerToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOAuthBearerTokenFailure provides a mock function with given fields: errstr
func (_m *Consumer) SetOAuthBearerTokenFailure(errstr string) error {
	ret := _m.Called(errstr)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(errstr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreOffsets provides a mock function with given fields: offsets
func (_m *Consumer) StoreOffsets(offsets []kafka.TopicPartition) ([]kafka.TopicPartition, error) {
	ret := _m.Called(offsets)

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func([]kafka.TopicPartition) []kafka.TopicPartition); ok {
		r0 = rf(offsets)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]kafka.TopicPartition) error); ok {
		r1 = rf(offsets)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *Consumer) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Subscribe provides a mock function with given fields: topic, rebalanceCb
func (_m *Consumer) Subscribe(topic string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topic, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, kafka.RebalanceCb) error); ok {
		r0 = rf(topic, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeTopics provides a mock function with given fields: topics, rebalanceCb
func (_m *Consumer) SubscribeTopics(topics []string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topics, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, kafka.RebalanceCb) error); ok {
		r0 = rf(topics, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscription provides a mock function with given fields:
func (_m *Consumer) Subscription() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unassign provides a mock function with given fields:
func (_m *Consumer) Unassign() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields:
func (_m *Consumer) Unsubscribe() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
